Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Tool Version : Vivado v.2017.4 (win64) Build 2086221 Fri Dec 15 20:55:39 MST 2017
| Date         : Thu Jan  3 15:45:23 2019
| Host         : DESKTOP-K5MQGMC running 64-bit major release  (build 9200)
| Command      : report_methodology -file design_1_wrapper_methodology_drc_routed.rpt -pb design_1_wrapper_methodology_drc_routed.pb -rpx design_1_wrapper_methodology_drc_routed.rpx
| Design       : design_1_wrapper
| Device       : xc7z020clg400-1
| Speed File   : -1
| Design State : Routed
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Report Methodology

Table of Contents
-----------------
1. REPORT SUMMARY
2. REPORT DETAILS

1. REPORT SUMMARY
-----------------
            Netlist: netlist
          Floorplan: design_1
      Design limits: <entire design considered>
             Max violations: <unlimited>
             Violations found: 47
+----------+----------+-------------------------------------------------+------------+
| Rule     | Severity | Description                                     | Violations |
+----------+----------+-------------------------------------------------+------------+
| PDRC-190 | Warning  | Suboptimally placed synchronized register chain | 16         |
| XDCB-5   | Warning  | Runtime inefficient way to find pin objects     | 31         |
+----------+----------+-------------------------------------------------+------------+

2. REPORT DETAILS
-----------------
PDRC-190#1 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD2/stat_reg_reg[0] in site SLICE_X111Y7 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD2/stat_reg_1_reg[0] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#2 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD2/stat_reg_reg[1] in site SLICE_X109Y6 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD2/stat_reg_1_reg[1] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#3 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD2/stat_reg_reg[2] in site SLICE_X108Y5 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD2/stat_reg_1_reg[2] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#4 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD2/stat_reg_reg[3] in site SLICE_X110Y5 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD2/stat_reg_1_reg[3] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#5 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD3/stat_reg_reg[0] in site SLICE_X110Y7 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD3/stat_reg_1_reg[0] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#6 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD3/stat_reg_reg[1] in site SLICE_X109Y8 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD3/stat_reg_1_reg[1] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#7 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD3/stat_reg_reg[2] in site SLICE_X108Y7 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD3/stat_reg_1_reg[2] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#8 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD4/shift_reg_in_reg[12] in site SLICE_X105Y1 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD4/shift_reg_in_reg[11] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#9 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD4/shift_reg_in_reg[20] in site SLICE_X105Y0 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD4/shift_reg_in_reg[19] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#10 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD4/shift_reg_in_reg[4] in site SLICE_X105Y2 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD4/shift_reg_in_reg[3] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#11 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD5/shift_reg_in_reg[10] in site SLICE_X99Y10 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD5/shift_reg_in_reg[9] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#12 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD5/shift_reg_in_reg[2] in site SLICE_X99Y11 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD5/shift_reg_in_reg[1] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#13 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD7_CTL/shift_reg_in_reg[0] in site SLICE_X110Y2 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD7_STAT/stat_reg_reg[0] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#14 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD7_STAT/stat_reg_reg[0] in site SLICE_X110Y3 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD7_STAT/stat_reg_1_reg[0] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#15 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD7_STAT/stat_reg_reg[1] in site SLICE_X112Y5 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD7_STAT/stat_reg_1_reg[1] is not placed in the same (SLICE) site.
Related violations: <none>

PDRC-190#16 Warning
Suboptimally placed synchronized register chain  
The FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD7_STAT/stat_reg_reg[2] in site SLICE_X111Y4 is part of a synchronized register chain that is suboptimally placed as the load FDRE cell dbg_hub/inst/BSCANID.u_xsdbm_id/CORE_XSDB.UUT_MASTER/U_ICON_INTERFACE/U_CMD7_STAT/stat_reg_1_reg[2] is not placed in the same (SLICE) site.
Related violations: <none>

XDCB-5#1 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/U_CDONE/I_YESLUT6.U_SRL32_*/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '51' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 80)
Related violations: <none>

XDCB-5#2 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/U_NS0/I_YESLUT6.U_SRL32_*/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '52' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 81)
Related violations: <none>

XDCB-5#3 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/U_NS1/I_YESLUT6.U_SRL32_*/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '53' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 82)
Related violations: <none>

XDCB-5#4 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/U_CMPRESET/I_YESLUT6.U_SRL32_*/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '40' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 63)
Related violations: <none>

XDCB-5#5 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/U_CMPRESET/I_YESLUT6.U_SRL32_*/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '45' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 74)
Related violations: <none>

XDCB-5#6 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/U_CMPRESET/I_YESLUT6.U_SRL32_*/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '46' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 75)
Related violations: <none>

XDCB-5#7 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_sample_counter/U_SCE/I_YESLUT6.U_SRLC16E/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '47' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 76)
Related violations: <none>

XDCB-5#8 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_sample_counter/U_SCE/I_YESLUT6.U_SRLC16E/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '48' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 77)
Related violations: <none>

XDCB-5#9 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_sample_counter/U_SCMPCE/I_YESLUT6.U_SRL32/CLK*"}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '38' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 60)
Related violations: <none>

XDCB-5#10 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_sample_counter/U_SCRST/I_YESLUT6.U_SRL32_*/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '49' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 78)
Related violations: <none>

XDCB-5#11 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_sample_counter/u_scnt_cmp/allx_typeA_match_detection.ltlib_v1_0_0_allx_typeA_inst/DUT/u_srl_drive/CLK*"}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '39' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 61)
Related violations: <none>

XDCB-5#12 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_window_counter/U_WCE/I_YESLUT6.U_SRLC16E/CLK*" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '50' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 79)
Related violations: <none>

XDCB-5#13 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_window_counter/U_WHCMPCE/I_YESLUT6.U_SRL32/CLK*"}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '43' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 72)
Related violations: <none>

XDCB-5#14 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_window_counter/U_WLCMPCE/I_YESLUT6.U_SRL32/CLK*"}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '44' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 73)
Related violations: <none>

XDCB-5#15 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_window_counter/u_wcnt_hcmp/allx_typeA_match_detection.ltlib_v1_0_0_allx_typeA_inst/DUT/u_srl_drive/CLK*"}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '42' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 71)
Related violations: <none>

XDCB-5#16 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_window_counter/u_wcnt_lcmp/allx_typeA_match_detection.ltlib_v1_0_0_allx_typeA_inst/DUT/u_srl_drive/CLK*"}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '41' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 70)
Related violations: <none>

XDCB-5#17 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~ "*ila_core_inst/ADV_TRIG.u_adv_trig/FLAG*/C" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '62' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 95)
Related violations: <none>

XDCB-5#18 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~ "*ila_core_inst/ADV_TRIG.u_adv_trig/SEQUENCER_STATE_O*/C" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '61' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 94)
Related violations: <none>

XDCB-5#19 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~ "*ila_core_inst/COUNTER.u_count/G_COUNTER[*].U_COUNTER/counter_load_i*/C" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '60' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 93)
Related violations: <none>

XDCB-5#20 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~ "*ila_core_inst/u_ila_cap_ctrl/u_cap_addrgen/u_cap_sample_counter/U_SCRST/I_YESLUT6.U_SRL32*/CLK" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '59' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 92)
Related violations: <none>

XDCB-5#21 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~ "*ila_core_inst/u_ila_reset_ctrl/asyncrounous_transfer.arm_out_transfer_inst/dout_reg1_reg/C" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '54' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 87)
Related violations: <none>

XDCB-5#22 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~ "*ila_core_inst/u_ila_reset_ctrl/asyncrounous_transfer.arm_out_transfer_inst/dout_reg1_reg/C" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '55' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 88)
Related violations: <none>

XDCB-5#23 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~ "*ila_core_inst/u_ila_reset_ctrl/asyncrounous_transfer.arm_out_transfer_inst/dout_reg1_reg/C" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '56' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 89)
Related violations: <none>

XDCB-5#24 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~ "*ila_core_inst/u_ila_reset_ctrl/asyncrounous_transfer.arm_out_transfer_inst/dout_reg1_reg/C" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '57' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 90)
Related violations: <none>

XDCB-5#25 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter { NAME =~ "*ila_core_inst/u_ila_reset_ctrl/asyncrounous_transfer.arm_out_transfer_inst/dout_reg1_reg/C" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '58' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 91)
Related violations: <none>

XDCB-5#26 Warning
Runtime inefficient way to find pin objects  
The option '-from : [get_pins -hierarchical -filter {NAME =~ *allx_typeA_match_detection.ltlib_v1_0_0_allx_typeA_inst/DUT/u_srl_drive/CLK}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '32' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 40)
Related violations: <none>

XDCB-5#27 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/COUNTER.u_count/G_COUNTER[*].U_COUNTER/counter_reg[*]/D" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '60' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 93)
Related violations: <none>

XDCB-5#28 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_regs/reg_88f/I_EN_STAT_EQ1.U_STAT/xsdb_reg*/D" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '61' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 94)
Related violations: <none>

XDCB-5#29 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  "*ila_core_inst/u_ila_regs/reg_892/I_EN_STAT_EQ1.U_STAT/xsdb_reg*/D" }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '62' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 95)
Related violations: <none>

XDCB-5#30 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter {NAME =~ *allx_typeA_match_detection.ltlib_v1_0_0_allx_typeA_inst/DUT/I_WHOLE_SLICE.G_SLICE_IDX[*].U_ALL_SRL_SLICE/I_IS_TERMINATION_SLICE_W_OUTPUT_REG.DOUT_O_reg/D}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '32' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/u_ila_0_CV.0/out/ila.xdc (Line: 40)
Related violations: <none>

XDCB-5#31 Warning
Runtime inefficient way to find pin objects  
The option 'objects : [get_pins -hierarchical -filter {NAME =~ "*BSCANID.u_xsdbm_id/SWITCH_N_EXT_BSCAN.bscan_inst/SERIES7_BSCAN.bscan_inst/TCK"}]' of constraint 'create_clock' uses inefficient query to find pin objects (see constraint position '4' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: c:/SHS/Zynq7000AP_SoC_Ethernet_Packet_Redirection_Design/HW/project_upgrade/project_upgrade.runs/impl_1/.Xil/Vivado-48740-DESKTOP-K5MQGMC/dbg_hub_CV.0/out/xsdbm.xdc (Line: 5)
Related violations: <none>


